{"version":3,"sources":["Components/Task.js","App.js","serviceWorker.js","index.js"],"names":["task","props","className","onClick","click","thingToDo","id","dateCreated","App","state","taskList","removeTaskHandler","index","updatedTaskList","splice","setState","handleKeyPress","event","key","todaysDate","Date","toDateString","target","value","tasks","this","map","type","onKeyPress","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAaeA,G,YATF,SAACC,GACV,OACI,yBAAKC,UAAU,OAAOC,QAASF,EAAMG,OACjC,2BAAIH,EAAMI,WACV,uBAAGC,GAAG,QAAQL,EAAMM,gBCuDjBC,E,4MA1DbC,MAAQ,CACNC,SAAU,I,EAGZC,kBAAoB,SAACC,GACnB,IAAMC,EAAe,YAAO,EAAKJ,MAAMC,UACvCG,EAAgBC,OAAOF,EAAO,GAC9B,EAAKG,SAAS,CAACL,SAAUG,K,EAG3BG,eAAiB,SAACC,GAChB,GAAiB,UAAdA,EAAMC,IAAgB,CACvB,IACIC,GADc,IAAIC,MACOC,eAEzBrB,EAAO,CACCK,UAAWY,EAAMK,OAAOC,MACxBhB,YAAaY,GAErBN,EAAe,sBAAO,EAAKJ,MAAMC,UAAlB,CAA4BV,IAE/C,EAAKe,SAAS,CACZL,SAAUG,IAGZI,EAAMK,OAAOC,MAAQ,K,uDAIf,IAAD,OACHC,EACF,6BACGC,KAAKhB,MAAMC,SAASgB,KAAI,SAAC1B,EAAMY,GAC9B,OAAO,kBAAC,EAAD,CACGP,UAAWL,EAAKK,UAChBE,YAAaP,EAAKO,YAClBW,IAAKlB,EAAKK,UACVD,MAAO,kBAAM,EAAKO,kBAAkBC,UAKpD,OACE,yBAAKV,UAAU,OACb,6CACA,mFACA,6EACA,6BACA,2BACEyB,KAAK,OACLC,WAAYH,KAAKT,iBAEnB,6BACCQ,O,GAtDSK,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aae67606.chunk.js","sourcesContent":["import React from 'react';\nimport './Task.css';\n\n\nconst task = (props) => {\n    return (\n        <div className=\"Task\" onClick={props.click}>\n            <p>{props.thingToDo}</p>\n            <p id='date'>{props.dateCreated}</p>\n        </div>\n    )\n};\n\nexport default task;","import React, { Component } from 'react';\nimport './App.css';\nimport Task from \"./Components/Task.js\";\n\nclass App extends Component {\n  state = {\n    taskList: []\n  };\n\n  removeTaskHandler = (index) => {\n    const updatedTaskList = [...this.state.taskList];\n    updatedTaskList.splice(index, 1);\n    this.setState({taskList: updatedTaskList});\n  }\n\n  handleKeyPress = (event) => { \n    if(event.key === 'Enter'){\n      let verboseDate = new Date();\n      let todaysDate = verboseDate.toDateString();\n      \n      let task = {  \n                  thingToDo: event.target.value,\n                  dateCreated: todaysDate\n                 };\n      let updatedTaskList = [...this.state.taskList, task];\n\n      this.setState({\n        taskList: updatedTaskList\n      });\n\n      event.target.value = '';\n    }\n  };\n  \n  render (){\n    let tasks = (\n      <div>\n        {this.state.taskList.map((task, index) => {\n          return <Task \n                    thingToDo={task.thingToDo}\n                    dateCreated={task.dateCreated} \n                    key={task.thingToDo}\n                    click={() => this.removeTaskHandler(index)}\n                 />\n        })}\n      </div>);\n\n    return (\n      <div className=\"App\">\n        <h1>ToDo List App</h1>\n        <p>Enter something to do in the text box then hit Enter</p>\n        <p>Click an item to remove it from your ToDo List</p>\n        <br/>\n        <input \n          type=\"text\"\n          onKeyPress={this.handleKeyPress} \n        />\n        <hr/>\n        {tasks}\n      </div>);\n      }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}